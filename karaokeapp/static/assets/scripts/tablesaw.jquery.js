!function (t) { "function" == typeof define && define.amd ? define(["jquery"], t) : "object" == typeof module && module.exports ? module.exports = function (e, a) { return void 0 === a && (a = "undefined" != typeof window ? require("jquery") : require("jquery")(e)), t(a), a } : t(jQuery) }(function (t) { "use strict"; var e = "undefined" != typeof window ? window : this, a = { i18n: { modes: ["Stack", "Swipe", "Toggle"], columns: 'Col<span class="a11y-sm">umn</span>s', columnBtnText: "Columns", columnsDialogError: "No eligible columns.", sort: "Sort" }, mustard: "head" in document && (!window.blackberry || window.WebKitPoint) && !window.operamini }; a.mustard && t(document.documentElement).addClass("tablesaw-enhanced"), function () { var s = "tablesaw", n = { toolbar: "tablesaw-bar" }, i = { create: "tablesawcreate", destroy: "tablesawdestroy", refresh: "tablesawrefresh", resize: "tablesawresize" }, o = "stack", l = "table", r = "[data-tablesaw],[data-tablesaw-mode],[data-tablesaw-sortable]", c = {}; a.events = i; var d = function (e) { if (!e) throw new Error("Tablesaw requires an element."); this.table = e, this.$table = t(e), this.$thead = this.$table.children().filter("thead").eq(0), this.$tbody = this.$table.children().filter("tbody"), this.mode = this.$table.attr("data-tablesaw-mode") || o, this.$toolbar = null, this.init() }; d.prototype.init = function () { this.$table.attr("id") || this.$table.attr("id", s + "-" + Math.round(1e4 * Math.random())), this.createToolbar(), this._initCells(), this.$table.data(s, this), this.$table.trigger(i.create, [this]) }, d.prototype.getConfig = function (e) { var a = t.extend(c, e || {}); return t.extend(a, "undefined" != typeof TablesawConfig ? TablesawConfig : {}) }, d.prototype._getPrimaryHeaderRow = function () { return this._getHeaderRows().eq(0) }, d.prototype._getHeaderRows = function () { return this.$thead.children().filter("tr").filter(function () { return !t(this).is("[data-tablesaw-ignorerow]") }) }, d.prototype._getRowIndex = function (t) { return t.prevAll().length }, d.prototype._getHeaderRowIndeces = function () { var e = this, a = []; return this._getHeaderRows().each(function () { a.push(e._getRowIndex(t(this))) }), a }, d.prototype._getPrimaryHeaderCells = function (t) { return (t || this._getPrimaryHeaderRow()).find("th") }, d.prototype._findPrimaryHeadersForCell = function (t) { for (var e = this._getPrimaryHeaderRow(), a = this._getPrimaryHeaderCells(e), s = this._getRowIndex(e), n = [], i = 0; i < this.headerMapping.length; i++) if (i !== s) for (var o = 0; o < this.headerMapping[i].length; o++) this.headerMapping[i][o] === t && n.push(a[o]); return n }, d.prototype.getRows = function () { var e = this; return this.$table.find("tr").filter(function () { return t(this).closest("table").is(e.$table) }) }, d.prototype.getBodyRows = function (e) { return (e ? t(e) : this.$tbody).children().filter("tr") }, d.prototype.getHeaderCellIndex = function (t) { for (var e = this.headerMapping[0], a = 0; a < e.length; a++) if (e[a] === t) return a; return -1 }, d.prototype._initCells = function () { var e = this.getRows(), a = []; e.each(function (t) { a[t] = [] }), e.each(function (e) { var s = 0, n = t(this), i = n.children(); i.each(function () { for (var t = parseInt(this.getAttribute("colspan"), 10), n = parseInt(this.getAttribute("rowspan"), 10) ; a[e][s];) s++; if (a[e][s] = this, t) for (var i = 0; t - 1 > i; i++) s++, a[e][s] = this; if (n) for (var o = 1; n > o; o++) a[e + o][s] = this; s++ }) }); for (var s = this._getHeaderRowIndeces(), n = 0; n < a[0].length; n++) for (var i = 0, o = s.length; o > i; i++) { var l, r = a[s[i]][n], c = s[i]; for (r.cells || (r.cells = []) ; c < a.length;) l = a[c][n], r !== l && r.cells.push(l), c++ } this.headerMapping = a }, d.prototype.refresh = function () { this._initCells(), this.$table.trigger(i.refresh, [this]) }, d.prototype._getToolbarAnchor = function () { var t = this.$table.parent(); return t.is(".tablesaw-overflow") ? t : this.$table }, d.prototype._getToolbar = function (t) { return t || (t = this._getToolbarAnchor()), t.prev().filter("." + n.toolbar) }, d.prototype.createToolbar = function () { var e = this._getToolbarAnchor(), a = this._getToolbar(e); a.length || (a = t("<div>").addClass(n.toolbar).insertBefore(e)), this.$toolbar = a, this.mode && this.$toolbar.addClass("tablesaw-mode-" + this.mode) }, d.prototype.destroy = function () { this._getToolbar().each(function () { this.className = this.className.replace(/\btablesaw-mode\-\w*\b/gi, "") }); var e = this.$table.attr("id"); t(document).off("." + e), t(window).off("." + e), this.$table.trigger(i.destroy, [this]), this.$table.removeData(s) }, t.fn[s] = function () { return this.each(function () { var e = t(this); e.data(s) || new d(this) }) }; var h = t(e.document); h.on("enhance.tablesaw", function (e) { a.mustard && t(e.target).find(l).filter(r)[s]() }); var u, f = !1; h.on("scroll.tablesaw", function () { f = !0, e.clearTimeout(u), u = e.setTimeout(function () { f = !1 }, 300) }); var b; t(e).on("resize", function () { f || (e.clearTimeout(b), b = e.setTimeout(function () { h.trigger(i.resize) }, 150)) }) }(), function () { var e = { stackTable: "tablesaw-stack", cellLabels: "tablesaw-cell-label", cellContentLabels: "tablesaw-cell-content" }, s = { key: "tablesaw-stack" }, n = { labelless: "data-tablesaw-no-labels", hideempty: "data-tablesaw-hide-empty" }, i = function (e, a) { this.tablesaw = a, this.$table = t(e), this.labelless = this.$table.is("[" + n.labelless + "]"), this.hideempty = this.$table.is("[" + n.hideempty + "]"), this.$table.data(s.key, this) }; i.prototype.init = function () { if (this.$table.addClass(e.stackTable), !this.labelless) { var a = this; this.$table.find("th, td").filter(function () { return !t(this).closest("thead").length }).filter(function () { return !(t(this).closest("tr").is("[" + n.labelless + "]") || a.hideempty && !t(this).html()) }).each(function () { var s = t(document.createElement("b")).addClass(e.cellLabels), n = t(this); t(a.tablesaw._findPrimaryHeadersForCell(this)).each(function (e) { var a = t(this.cloneNode(!0)), n = a.find(".tablesaw-sortable-btn"); a.find(".tablesaw-sortable-arrow").remove(); var i = a.find("[data-tablesaw-checkall]"); return i.closest("label").remove(), i.length ? void (s = t([])) : (e > 0 && s.append(document.createTextNode(", ")), void s.append(n.length ? n[0].childNodes : a[0].childNodes)) }), s.length && !n.find("." + e.cellContentLabels).length && n.wrapInner("<span class='" + e.cellContentLabels + "'></span>"); var i = n.find("." + e.cellLabels); i.length ? i.replaceWith(s) : n.prepend(s) }) } }, i.prototype.destroy = function () { this.$table.removeClass(e.stackTable), this.$table.find("." + e.cellLabels).remove(), this.$table.find("." + e.cellContentLabels).each(function () { t(this).replaceWith(this.childNodes) }) }, t(document).on(a.events.create, function (t, e) { if ("stack" === e.mode) { var a = new i(e.table, e); a.init() } }).on(a.events.refresh, function (e, a) { "stack" === a.mode && t(a.table).data(s.key).init() }).on(a.events.destroy, function (e, a) { "stack" === a.mode && t(a.table).data(s.key).destroy() }) }(), function () { var e = "tablesawbtn", a = { _create: function () { return t(this).each(function () { t(this).trigger("beforecreate." + e)[e]("_init").trigger("create." + e) }) }, _init: function () { var a = t(this), s = this.getElementsByTagName("select")[0]; return s && t(this).addClass("btn-select tablesaw-btn-select")[e]("_select", s), a }, _select: function (e) { var a = function (e, a) { var s, n, i = t(a).find("option"), o = document.createElement("span"), l = !1; if (o.setAttribute("aria-hidden", "true"), o.innerHTML = "&#160;", i.each(function () { var t = this; t.selected && (o.innerHTML = t.text) }), n = e.childNodes, i.length > 0) { for (var r = 0, c = n.length; c > r; r++) s = n[r], s && "SPAN" === s.nodeName.toUpperCase() && (e.replaceChild(o, s), l = !0); l || e.insertBefore(o, e.firstChild) } }; a(this, e), t(this).on("change refresh", function () { a(this, e) }) } }; t.fn[e] = function (a, s, n, i) { return this.each(function () { return a && "string" == typeof a ? t.fn[e].prototype[a].call(this, s, n, i) : t(this).data(e + "active") ? t(this) : (t(this).data(e + "active", !0), void t.fn[e].prototype._create.call(this)) }) }, t.extend(t.fn[e].prototype, a) }(), function () { var e = { key: "tablesaw-coltoggle" }, s = function (a) { this.$table = t(a), this.$table.length && (this.tablesaw = this.$table.data("tablesaw"), this.attributes = { subrow: "data-tablesaw-subrow", ignorerow: "data-tablesaw-ignorerow", btnTarget: "data-tablesaw-columntoggle-btn-target", set: "data-tablesaw-columntoggle-set" }, this.classes = { columnToggleTable: "tablesaw-columntoggle", columnBtnContain: "tablesaw-columntoggle-btnwrap tablesaw-advance", columnBtn: "tablesaw-columntoggle-btn tablesaw-nav-btn down", popup: "tablesaw-columntoggle-popup", priorityPrefix: "tablesaw-priority-" }, this.set = [], this.$headers = this.tablesaw._getPrimaryHeaderCells(), this.$table.data(e.key, this)) }; s.prototype.initSet = function () { var e = this.$table.attr(this.attributes.set); if (e) { var a = this.$table[0]; this.set = t("table[" + this.attributes.set + "='" + e + "']").filter(function () { return this !== a }).get() } }, s.prototype.init = function () { function s(e) { var a = e.checked, s = u.getHeaderFromCheckbox(e), n = u.$getCells(s); n[a ? "removeClass" : "addClass"]("tablesaw-cell-hidden"), n[a ? "addClass" : "removeClass"]("tablesaw-cell-visible"), u.updateColspanIgnoredRows(a, t(s).add(s.cells)), u.$table.trigger("tablesawcolumns") } function n(e) { e && t(e.target).closest("." + u.classes.popup).length || (t(document).off("click." + o), r.removeClass("up").addClass("down"), h.removeClass("visible")) } function i() { h.addClass("visible"), r.removeClass("down").addClass("up"), t(document).off("click." + o, n), window.clearTimeout(w), w = window.setTimeout(function () { t(document).on("click." + o, n) }, 15) } if (this.$table.length) { var o, l, r, c, d, h, u = this, f = this.tablesaw.getConfig({ getColumnToggleLabelTemplate: function (t) { return "<label><input type='checkbox' checked>" + t + "</label>" } }); this.$table.addClass(this.classes.columnToggleTable), o = this.$table.attr("id"), l = o + "-popup", h = t("<div class='" + this.classes.columnBtnContain + "'></div>"), r = t("<a href='#" + l + "' class='btn tablesaw-btn btn-micro " + this.classes.columnBtn + "' data-popup-link><span>" + a.i18n.columnBtnText + "</span></a>"), c = t("<div class='" + this.classes.popup + "' id='" + l + "'></div>"), d = t("<div class='btn-group'></div>"), this.$popup = c; var b = !1; this.$headers.each(function () { var e = t(this), a = e.attr("data-tablesaw-priority"), s = u.$getCells(this); a && "persist" !== a && (s.addClass(u.classes.priorityPrefix + a), t(f.getColumnToggleLabelTemplate(e.text())).appendTo(d).find('input[type="checkbox"]').data("tablesaw-header", this), b = !0) }), b || d.append("<label>" + a.i18n.columnsDialogError + "</label>"), d.appendTo(c), d.find('input[type="checkbox"]').on("change", function (a) { if (s(a.target), u.set.length) { var n; t(u.$popup).find("input[type='checkbox']").each(function (t) { return this === a.target ? (n = t, !1) : void 0 }), t(u.set).each(function () { var i = t(this).data(e.key).$popup.find("input[type='checkbox']").get(n); i && (i.checked = a.target.checked, s(i)) }) } }), r.appendTo(h); var p = t(this.$table.attr(this.attributes.btnTarget)); h.appendTo(p.length ? p : this.tablesaw.$toolbar); var w; r.on("click.tablesaw", function (t) { t.preventDefault(), h.is(".visible") ? n() : i() }), c.appendTo(h), this.$menu = d; var g = this.$table.closest(".tablesaw-overflow"); if (g.css("-webkit-overflow-scrolling")) { var v; g.on("scroll", function () { var e = t(this); window.clearTimeout(v), v = window.setTimeout(function () { e.css("-webkit-overflow-scrolling", "auto"), window.setTimeout(function () { e.css("-webkit-overflow-scrolling", "touch") }, 0) }, 100) }) } t(window).on(a.events.resize + "." + o, function () { u.refreshToggle() }), this.initSet(), this.refreshToggle() } }, s.prototype.updateColspanIgnoredRows = function (e, a) { this.$table.find("[" + this.attributes.subrow + "],[" + this.attributes.ignorerow + "]").each(function () { var s, n, i, o, l = t(this), r = l.find("td[colspan]").eq(0); e === !0 || e === !1 ? (o = a.filter(function () { return this === r[0] }).length ? e ? 1 : -1 : 0, n = parseInt(r.attr("colspan"), 10) + o) : (i = r.data("original-colspan"), i ? n = i : (n = parseInt(r.attr("colspan"), 10), r.data("original-colspan", n)), s = l.find("td").filter(function () { return this !== r[0] && "none" === t(this).css("display") }).length, n -= e - s), r.attr("colspan", n) }) }, s.prototype.$getCells = function (e) { var a = this; return t(e).add(e.cells).filter(function () { var e = t(this), s = e.parent(), n = e.is("[colspan]"); return !(s.is("[" + a.attributes.subrow + "]") || s.is("[" + a.attributes.ignorerow + "]") && n) }) }, s.prototype.getHeaderFromCheckbox = function (e) { return t(e).data("tablesaw-header") }, s.prototype.refreshToggle = function () { var t = this, e = 0; this.$menu.find("input").each(function () { var a = t.getHeaderFromCheckbox(this), s = "table-cell" === t.$getCells(a).eq(0).css("display"); this.checked = s, s || e++ }), this.updateColspanIgnoredRows(e) }, s.prototype.destroy = function () { this.$table.removeClass(this.classes.columnToggleTable), this.$table.find("th, td").each(function () { var e = t(this); e.removeClass("tablesaw-cell-hidden").removeClass("tablesaw-cell-visible"), this.className = this.className.replace(/\bui\-table\-priority\-\d\b/g, "") }) }, t(document).on(a.events.create, function (t, e) { if ("columntoggle" === e.mode) { var a = new s(e.table); a.init() } }), t(document).on(a.events.destroy, function (a, s) { "columntoggle" === s.mode && t(s.table).data(e.key).destroy() }) }(), function () { function e(e) { var a = []; return t(e.childNodes).each(function () { var e = t(this); e.is("input, select") ? a.push(e.val()) : e.is(".tablesaw-cell-label") || a.push((e.text() || "").replace(/^\s+|\s+$/g, "")) }), a.join("") } var s = "tablesaw-sortable", n = "table[data-" + s + "]", i = "[data-" + s + "-switch]", o = { sortCol: "data-tablesaw-sortable-col", defaultCol: "data-tablesaw-sortable-default-col", numericCol: "data-tablesaw-sortable-numeric", subRow: "data-tablesaw-subrow", ignoreRow: "data-tablesaw-ignorerow" }, l = { head: s + "-head", ascend: s + "-ascending", descend: s + "-descending", switcher: s + "-switch", tableToolbar: "tablesaw-bar-section", sortButton: s + "-btn" }, r = { _create: function (e) { return t(this).each(function () { var a = t(this).data(s + "-init"); return a ? !1 : void t(this).data(s + "-init", !0).trigger("beforecreate." + s)[s]("_init", e).trigger("create." + s) }) }, _init: function () { function n(e) { t.each(e, function (e, a) { t(a).addClass(l.head) }) } function r(e, a) { t.each(e, function (e, s) { var n = t("<button class='" + l.sortButton + "'/>"); n.on("click", { col: s }, a), t(s).wrapInner(n).find("button").append("<span class='tablesaw-sortable-arrow'>") }) } function c(e) { t.each(e, function (e, a) { var s = t(a); s.removeAttr(o.defaultCol), s.removeClass(l.ascend), s.removeClass(l.descend) }) } function d(e) { if (!t(e.target).is("a[href]")) { e.stopPropagation(); var a = t(e.target).closest("[" + o.sortCol + "]"), n = e.data.col, i = f.index(a[0]); c(a.closest("thead").find("th").filter(function () { return this !== a[0] })), a.is("." + l.descend) || !a.is("." + l.ascend) ? (p[s]("sortBy", n, !0), i += "_asc") : (p[s]("sortBy", n), i += "_desc"), b && b.find("select").val(i).trigger("refresh"), e.preventDefault() } } function h(e) { t.each(e, function (e, a) { var s = t(a); s.is("[" + o.defaultCol + "]") && (s.is("." + l.descend) || s.addClass(l.ascend)) }) } function u(n) { b = t("<div>").addClass(l.switcher).addClass(l.tableToolbar); var i = ["<label>" + a.i18n.sort + ":"]; i.push('<span class="btn tablesaw-btn"><select>'), n.each(function (a) { var s = t(this), n = s.is("[" + o.defaultCol + "]"), r = s.is("." + l.descend), c = s.is("[" + o.numericCol + "]"), d = 0, h = 5; t(this.cells.slice(0, h)).each(function () { isNaN(parseInt(e(this), 10)) || d++ }); var u = d === h; c || s.attr(o.numericCol, u ? "" : "false"), i.push("<option" + (n && !r ? " selected" : "") + ' value="' + a + '_asc">' + s.text() + " " + (u ? "&#x2191;" : "(A-Z)") + "</option>"), i.push("<option" + (n && r ? " selected" : "") + ' value="' + a + '_desc">' + s.text() + " " + (u ? "&#x2193;" : "(Z-A)") + "</option>") }), i.push("</select></span></label>"), b.html(i.join("")); var r = w.$toolbar.children().eq(0); r.length ? b.insertBefore(r) : b.appendTo(w.$toolbar), b.find(".tablesaw-btn").tablesawbtn(), b.find("select").on("change", function () { var e = t(this).val().split("_"), a = n.eq(e[0]); c(a.siblings()), p[s]("sortBy", a.get(0), "asc" === e[1]) }) } var f, b, p = t(this), w = p.data("tablesaw"); p.addClass(s), f = p.children().filter("thead").find("th[" + o.sortCol + "]"), n(f), r(f, d), h(f), p.is(i) && u(f) }, sortRows: function (a, s, n, i, l) { function r(a, s) { var n = []; return t.each(a, function (a, i) { for (var l = i.parentNode, r = t(l), c = [], d = r.next() ; d.is("[" + o.subRow + "]") ;) c.push(d[0]), d = d.next(); var h = l.parentNode; r.is("[" + o.subRow + "]") || h === s && n.push({ element: i, cell: e(i), row: l, subrows: c.length ? c : null, ignored: r.is("[" + o.ignoreRow + "]") }) }), n } function c(t, e) { var a, s = /[^\-\+\d\.]/g; return a = t ? function (t, a) { return t.ignored || a.ignored ? 0 : e ? parseFloat(t.cell.replace(s, "")) - parseFloat(a.cell.replace(s, "")) : t.cell.toLowerCase() > a.cell.toLowerCase() ? 1 : -1 } : function (t, a) { return t.ignored || a.ignored ? 0 : e ? parseFloat(a.cell.replace(s, "")) - parseFloat(t.cell.replace(s, "")) : t.cell.toLowerCase() < a.cell.toLowerCase() ? 1 : -1 } } function d(t) { var e, a, s = []; for (e = 0, a = t.length; a > e; e++) s.push(t[e].row), t[e].subrows && s.push(t[e].subrows); return s } var h, u, f = r(i.cells, l), b = t(i).data("tablesaw-sort"); return h = (b && "function" == typeof b ? b(n) : !1) || c(n, t(i).is("[" + o.numericCol + "]") && !t(i).is("[" + o.numericCol + '="false"]')), u = f.sort(h), a = d(u) }, makeColDefault: function (e, a) { var s = t(e); s.attr(o.defaultCol, "true"), a ? (s.removeClass(l.descend), s.addClass(l.ascend)) : (s.removeClass(l.ascend), s.addClass(l.descend)) }, sortBy: function (e, a) { var n, i = t(this), o = i.data("tablesaw"); o.$tbody.each(function () { var l, r, c, d = this, h = t(this), u = o.getBodyRows(d), f = o.headerMapping[0]; for (r = 0, c = f.length; c > r; r++) if (f[r] === e) { n = r; break } for (l = i[s]("sortRows", u, n, a, e, d), r = 0, c = l.length; c > r; r++) h.append(l[r]) }), i[s]("makeColDefault", e, a), i.trigger("tablesaw-sorted") } }; t.fn[s] = function (e) { var a, n = Array.prototype.slice.call(arguments, 1); return e && "string" == typeof e ? (a = t.fn[s].prototype[e].apply(this[0], n), "undefined" != typeof a ? a : t(this)) : (t(this).data(s + "-active") || (t(this).data(s + "-active", !0), t.fn[s].prototype._create.call(this, e)), t(this)) }, t.extend(t.fn[s].prototype, r), t(document).on(a.events.create, function (t, e) { e.$table.is(n) && e.$table[s]() }) }(), function () { function s(s, o) { function l(e) { return t(e.cells).add(e) } function r(t) { l(t).removeClass("tablesaw-cell-hidden") } function c(t) { l(t).addClass("tablesaw-cell-hidden") } function d(t) { l(t).addClass("tablesaw-cell-persist") } function h(e) { return t(e).is('[data-tablesaw-priority="persist"]') } function u() { o.removeClass(n.persistWidths), t("#" + M + "-persist").remove() } function f() { var e, a = "#" + M + ".tablesaw-swipe ", s = [], i = o.width(), l = []; if (_.each(function (t) { var e; h(this) && (e = this.offsetWidth, .75 * i > e && (l.push(t + "-" + e), s.push(a + " .tablesaw-cell-persist:nth-child(" + (t + 1) + ") { width: " + e + "px; }"))) }), e = l.join("_"), s.length) { o.addClass(n.persistWidths); var r = t("#" + M + "-persist"); r.length && r.data("tablesaw-hash") === e || (r.remove(), t("<style>" + s.join("\n") + "</style>").attr("id", M + "-persist").data("tablesaw-hash", e).appendTo(H)) } } function b() { var e, a = []; return B.each(function (s) { var n = t(this), i = "none" === n.css("display") || n.is(".tablesaw-cell-hidden"); if (i || e) { if (i && e) return a[1] = s, !1 } else e = !0, a[0] = s }), a } function p() { var t = b(); return [t[1] - 1, t[0] - 1] } function w(t) { return t ? b() : p() } function g(t) { return t[1] > -1 && t[1] < B.length } function v() { var t = o.attr("data-tablesaw-swipe-media"); return !t || "matchMedia" in e && e.matchMedia(t).matches } function m() { if (v()) { var e = o.parent().width(), a = [], s = 0, n = [], i = _.length; _.each(function (o) { var l = t(this), r = l.is('[data-tablesaw-priority="persist"]'); a.push(r), s += R[o], n.push(s), (r || s > e) && i-- }); var l = 0 === i; _.each(function (t) { return a[t] ? void d(this) : void (n[t] <= e || l ? (l = !1, r(this)) : c(this)) }), u(), o.trigger("tablesawcolumns") } } function C(t) { var e = w(t); g(e) && (isNaN(e[0]) && (t ? e[0] = 0 : e[0] = B.length - 1), f(), c(B.get(e[0])), r(B.get(e[1])), o.trigger("tablesawcolumns")) } function y(t, e) { return (t.touches || t.originalEvent.touches)[0][e] } var $ = o.data("tablesaw"), k = t("<div class='tablesaw-advance'></div>"), T = t("<a href='#' class='btn tablesaw-nav-btn tablesaw-btn btn-micro left' title='Previous Column'></a>").appendTo(k), x = t("<a href='#' class='btn tablesaw-nav-btn tablesaw-btn btn-micro right' title='Next Column'></a>").appendTo(k), _ = s._getPrimaryHeaderCells(), B = _.not('[data-tablesaw-priority="persist"]'), R = [], H = t(document.head || "head"), M = o.attr("id"); if (!_.length) throw new Error("tablesaw swipe: no header cells found. Are you using <th> inside of <thead>?"); o.addClass("tablesaw-swipe"), _.each(function () { var t = this.offsetWidth; R.push(t) }), k.appendTo($.$toolbar), M || (M = "tableswipe-" + Math.round(1e4 * Math.random()), o.attr("id", M)), T.add(x).on("click", function (e) { C(!!t(e.target).closest(x).length), e.preventDefault() }), o.is("[" + i.disableTouchEvents + "]") || o.on("touchstart.swipetoggle", function (n) { var i, o, l = y(n, "pageX"), r = y(n, "pageY"), c = window.pageYOffset; t(e).off(a.events.resize, m), t(this).on("touchmove.swipetoggle", function (t) { i = y(t, "pageX"), o = y(t, "pageY") }).on("touchend.swipetoggle", function () { var n = s.getConfig({ swipeHorizontalThreshold: 30, swipeVerticalThreshold: 30 }), d = n.swipe ? n.swipe.verticalThreshold : n.swipeVerticalThreshold, h = n.swipe ? n.swipe.horizontalThreshold : n.swipeHorizontalThreshold, u = Math.abs(window.pageYOffset - c) >= d, f = Math.abs(o - r) >= d; f || u || (-1 * h > i - l && C(!0), i - l > h && C(!1)), window.setTimeout(function () { t(e).on(a.events.resize, m) }, 300), t(this).off("touchmove.swipetoggle touchend.swipetoggle") }) }), o.on("tablesawcolumns.swipetoggle", function () { var t = g(p()), e = g(b()); T[t ? "removeClass" : "addClass"](n.hideBtn), x[e ? "removeClass" : "addClass"](n.hideBtn), $.$toolbar[t || e ? "removeClass" : "addClass"](n.allColumnsVisible) }).on("tablesawnext.swipetoggle", function () { C(!0) }).on("tablesawprev.swipetoggle", function () { C(!1) }).on(a.events.destroy + ".swipetoggle", function () { var s = t(this); s.removeClass("tablesaw-swipe"), $.$toolbar.find(".tablesaw-advance").remove(), t(e).off(a.events.resize, m), s.off(".swipetoggle") }).on(a.events.refresh, function () { R = [], _.each(function () { var t = this.offsetWidth; R.push(t) }), m() }), m(), t(e).on(a.events.resize, m) } var n = { hideBtn: "disabled", persistWidths: "tablesaw-fix-persist", allColumnsVisible: "tablesaw-all-cols-visible" }, i = { disableTouchEvents: "data-tablesaw-no-touch" }; t(document).on(a.events.create, function (t, e) { "swipe" === e.mode && s(e, e.$table) }) }(), function () { function s(s) { function i(t) { var a = t.attr(n.attr.init); return !a || e.matchMedia && e.matchMedia(a).matches } function o() { if (!i(s)) return void r.css("display", "none"); r.css("display", "block"); var e = c.find("li").removeClass(d); s.find("thead th").each(function (a) { "none" === t(this).css("display") && e.eq(a).addClass(d) }) } var l = s.data("tablesaw"), r = t('<div class="tablesaw-advance minimap">'), c = t('<ul class="tablesaw-advance-dots">').appendTo(r), d = "tablesaw-advance-dots-hide", h = s.find("thead th"); h.each(function () { c.append("<li><i></i></li>") }), r.appendTo(l.$toolbar), o(), t(e).on(a.events.resize, o), s.on("tablesawcolumns.minimap", function () { o() }).on(a.events.destroy + ".minimap", function () { var s = t(this); l.$toolbar.find(".tablesaw-advance").remove(), t(e).off(a.events.resize, o), s.off(".minimap") }) } var n = { attr: { init: "data-tablesaw-minimap" } }; t(document).on(a.events.create, function (t, e) { "swipe" !== e.mode && "columntoggle" !== e.mode || !e.$table.is("[ " + n.attr.init + "]") || s(e.$table) }) }(), function () { var s = { selectors: { init: "table[data-tablesaw-mode-switch]" }, attributes: { excludeMode: "data-tablesaw-mode-exclude" }, classes: { main: "tablesaw-modeswitch", toolbar: "tablesaw-bar-section" }, modes: ["stack", "swipe", "columntoggle"], init: function (e) { var n, i = t(e), o = i.data("tablesaw"), l = i.attr(s.attributes.excludeMode), r = o.$toolbar, c = t("<div>").addClass(s.classes.main + " " + s.classes.toolbar), d = ["<label>" + a.i18n.columns + ":"], h = i.attr("data-tablesaw-mode"); d.push('<span class="btn tablesaw-btn"><select>'); for (var u = 0, f = s.modes.length; f > u; u++) l && l.toLowerCase() === s.modes[u] || (n = h === s.modes[u], d.push("<option" + (n ? " selected" : "") + ' value="' + s.modes[u] + '">' + a.i18n.modes[u] + "</option>")); d.push("</select></span></label>"), c.html(d.join("")); var b = r.find(".tablesaw-advance").eq(0); b.length ? c.insertBefore(b) : c.appendTo(r), c.find(".tablesaw-btn").tablesawbtn(), c.find("select").on("change", function (a) { return s.onModeChange.call(e, a, t(this).val()) }) }, onModeChange: function (e, a) { var n = t(this), i = n.data("tablesaw"), o = i.$toolbar.find("." + s.classes.main); o.remove(), i.destroy(), n.attr("data-tablesaw-mode", a), n.tablesaw() } }; t(e.document).on(a.events.create, function (t, e) { e.$table.is(s.selectors.init) && s.init(e.table) }) }(), function () { function e(t) { this.tablesaw = t, this.$table = t.$table, this.attr = "data-tablesaw-checkall", this.checkAllSelector = "[" + this.attr + "]", this.forceCheckedSelector = "[" + this.attr + "-checked]", this.forceUncheckedSelector = "[" + this.attr + "-unchecked]", this.checkboxSelector = 'input[type="checkbox"]', this.$triggers = null, this.$checkboxes = null, this.$table.data(s) || (this.$table.data(s, this), this.init()) } var s = "tablesawCheckAll"; e.prototype._filterCells = function (e) { return e.filter(function () { return !t(this).closest("tr").is("[data-tablesaw-subrow],[data-tablesaw-ignorerow]") }).find(this.checkboxSelector).not(this.checkAllSelector) }, e.prototype.getCheckboxesForButton = function (e) { return this._filterCells(t(t(e).attr(this.attr))) }, e.prototype.getCheckboxesForCheckbox = function (e) { return this._filterCells(t(t(e).closest("th")[0].cells)) }, e.prototype.init = function () { var e = this; this.$table.find(this.checkAllSelector).each(function () { var a = t(this); a.is(e.checkboxSelector) ? e.addCheckboxEvents(this) : e.addButtonEvents(this) }) }, e.prototype.addButtonEvents = function (e) { var a = this; t(e).on("click", function (e) { e.preventDefault(); var n = a.getCheckboxesForButton(this), i = !0; n.each(function () { this.checked || (i = !1) }); var o; o = t(this).is(a.forceCheckedSelector) ? !0 : t(this).is(a.forceUncheckedSelector) ? !1 : i ? !1 : !0, n.each(function () { this.checked = o, t(this).trigger("change." + s) }) }) }, e.prototype.addCheckboxEvents = function (e) { var a = this; t(e).on("change", function () { var t = this.checked; a.getCheckboxesForCheckbox(this).each(function () { this.checked = t }) }); var n = a.getCheckboxesForCheckbox(e); n.on("change." + s, function () { var t = 0; n.each(function () { this.checked && t++ }); var a = t === n.length; e.checked = a, e.indeterminate = 0 !== t && !a }) }, t(document).on(a.events.create, function (t, a) { new e(a) }) }() });